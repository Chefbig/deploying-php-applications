# 1. Automate, automate, automate

I want to get this off the bat right away and I think it deserves its own chapter. 

One of the most crucial ingredients in your deployment process should be **automate everything** in order to **minimize human errors**. If your deployment process involves manual steps, you're going to have a bad time and shit will hit the inevitable fan. Nobody is perfect. People can, and will forget, if they need to remember and execute them.

An automated deployment process will boost the confidence of the person deploying. Knowing that everything will be taken care of is a major contributor to feeling safe during a deploy. Of course other unexpected issues can arise. But with logging and notifications (chapter 13) you can relax and figure out what went wrong.

## One button to rule them all

You should have **one** button to push or **one** command to run, to deploy your application. If you don't, something is wrong. Automate these steps. Perhaps the only manual intervention I would consider okay is *"Are you sure? This will push stuff to production. [N/y]"*.

Even if you're the only developer on a project and you're deploying the application each time. I would say it's a bad practice having manual steps. When it comes to teams it becomes a lot worse. If not all team members are familiar with the deployment steps, they won't be able to deploy. Team members come and go, whenever a new team member arrive they will need to learn how to deploy in the correct manner. Sure there can be a nice documentation for it. But whenever someone is familiar enough with it they will most likely start to deploy without it.

## Example of a manual step

Let's take an example where you have a revision number of your assets in code. I would say this is a rather common practice (unfortunately) and I've seen it on many occasions. This revision number handles cache busting so browsers do not keep serving old assets after a deploy. 

This definition is perhaps a constant somewhere.

{lang=php}
~~~~~~~~
class Assets 
{
    const REVISION = 14;
}
~~~~~~~~

Then it's applied to the static assets.

{lang=html}
~~~~~~~~
<link rel="stylesheet" type="text/css" href="style.css?v=<?=Assets::REVISION?>">
~~~~~~~~

This is one of the worst possible manual steps you could have. It is easy to forget since it requires a code change. If it's forgotten it might break the users' experience with cached and out dated assets. A manual step where you would have to run a command in connection to the deploy would be better since it would be easier to remember. When you are already have the command line in front of you, you will be more prone to remember it.

Since it requires a code change another issue will most likely occur. That is when you remember the step in the middle of the deploy. You were just about to push changes into production. You stop yourself before pressing the button screaming "Shit, the assets revision number!". Now you have to deal with changing the code, committing it and push the code through your deployment chain again. In my perfect world you would've already merged a release branch  and tagged it (discussed in chapter 2). So how would you approach that now? Reset your repository and remove the tag, commit and then create the release branch yet again? Or would you just commit and push, knowing that it will break [traceability](http://en.wikipedia.org/wiki/Traceability#Software_development) for this specific deploy?

This is a problem that goes away with automation. You can achieve this in many ways. I won't go into specifics in this chapter, we'll discuss dealing with assets in chapter 9.

## Time is always a factor

You might be prone to say that you don't have time automating all the trivial steps or commands. If you spend one hour automating a command that takes one second to run. You would have to run that command 3601 times before you have saved time on it. Yes, I did the math. While this is true, I would say that it is not the whole truth.

We need to take into account the time spent on dealing with issues arising when forgetting the step or command. Time spent on cleaning up. Can you measure bad user experience when your application breaks or behaves incorrect? Most likely not. In the previous example, you can't tell how much time that you will spend on correcting that error. Neither can you tell the impact on the users. 

If the problem is not caught in time it could persist for a long time. 